#!/usr/bin/env node

'use strict';

let fs = require('fs')
let spawn = require('child_process').spawn
let os = require('os')

let _ = require('lodash')
let chokidar = require('chokidar')
let minimist = require('minimist')

let meta = require('./package.json')

let log = console.error.bind(console, `${meta.name}:`)

let vlog = () => {}

class NEId {
    constructor() {
	this.counter = 0
    }

    get() {
	return this.counter++
    }
}

class NotifyEvent {
    constructor(neid, event, file) {
	this.id = neid.get()
	this.event = event
	this.file = file
    }

    toString() {
	return [this.id, this.event, this.file].join(' ')
    }
}

let tidings = function(cmd, state, ne, force = false) {
    if (state.locked) {
	vlog(`${ne}: LOCKED`)
	state.solicitor = ne
	return
    }

    vlog(`${ne}: RUN "${cmd.name}"` + (force ? ' again' : ''))

    state.solicitor = null
    state.locked = true
    let child = spawn(cmd.name, cmd.args,
		      { stdio: ['inherit', 'inherit', 'inherit'] })

    child.on('exit', (code) => {
	state.locked = false
	if (code !== 0) log(`${ne.id}: ${cmd.name} exited w/ ${code}`)
	if (state.solicitor) tidings(cmd, state, state.solicitor, true)
    })

    child.on('error', (err) => {
	state.locked = false
	log(`${ne.id}: ${cmd.name}: ${err}`)
	if (state.solicitor) tidings(cmd, state, state.solicitor, true)
    })
}

let watch = function(conf) {
    let state = {
	locked: false,
	solicitor: null,
	last: null
    }

    let debounce_tidings = _.debounce(function(o, s, c) {
	tidings(o, s, c)
    }, conf.user.debounce)

    let neid = new NEId()
    let watcher = chokidar.watch(conf.user.a, {ignored: conf.user.e})

    watcher.on('all', (event, file) => {
	let cur = new NotifyEvent(neid, event, file)
	debounce_tidings(conf.cmd, state, cur)
	state.last = cur
    })

    watcher.on('error', err => {
	console.error(err.toString())
	if (err.code === 'ENOSPC' && os.platform() === 'linux') {
	    console.error(`
This usually means you've reached the max number of the inotify watches.
See /proc/sys/fs/inotify/max_user_watches for the current value.
We've defaulted on ${state.last.id+1}.`)
	}
	process.exit(1)
    })
}


// Main

let conf = {
    user: {
	a: '.',
	e: [],
	v: false,
	debounce: 1000,
    },
    cmd: {
	name: 'fortune',
	args: ['-n', '80', '-s']
    },
    exclude_def: ['.*~', '*~', '.#*', '.*.swp', '.lock-*',
		  'node_modules', 'npm-debug.log', '.git', '.hg', '.ph'],
}

let argv = minimist(process.argv.slice(2), {
    default: conf.user,
    boolean: ['v'],
    string: ['a']
})

conf.user = argv
conf.user.a = [].concat(argv.a)
conf.user.e = _.uniq(conf.exclude_def.concat(argv.e))
if (conf.user.v) vlog = log

if (argv._[0]) {
    conf.cmd.name = argv._[0]
    conf.cmd.args = argv._.slice(1)
}

vlog(conf.user)
try {
    // actually, it should be chokidar's job
    conf.user.a.forEach( dir => fs.statSync(dir) )
} catch (err) {
    console.error(err.toString())
    process.exit(1)
}
watch(conf)
