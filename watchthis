#!/usr/bin/env node

'use strict';

let fs = require('fs')
let spawn = require('child_process').spawn
let os = require('os')

let _ = require('lodash')
let chokidar = require('chokidar')
let minimist = require('minimist')
let shellwords = require('shellwords')

let meta = require('./package.json')

let log = console.error.bind(console, `${meta.name}:`)

let vlog = () => {}

class NEId {
    constructor() {
	this.counter = 0
    }

    get() {
	return this.counter++
    }
}

class NotifyEvent {
    constructor(neid, event, file) {
	this.id = neid.get()
	this.event = event
	this.file = file
    }

    toString() {
	return [this.id, this.event, this.file].join(' ')
    }
}

let tidings = function(conf, state, ne, force = false) {
    if (state.locked) {
	vlog(`${ne}: LOCKED`)
	if (!conf.user.norerun) state.solicitor = ne
	return
    }

    vlog(`${ne}: RUN${force ? ' AGAIN' : ''}: ${conf.cmd.name} ${conf.cmd.args.join(' ')}`)

    state.solicitor = null
    state.locked = true
    let child = spawn(conf.cmd.name, conf.cmd.args, { stdio: [0, 1, 2] })

    child.on('exit', (code) => {
	state.locked = false
	log(`${ne.id}: ${conf.cmd.name} exit code: ${code}`)
	exit_hook(conf, code)
	if (state.solicitor) tidings(conf, state, state.solicitor, true)
    })

    child.on('error', (err) => {
	state.locked = false
	log(`${ne.id}: ${conf.cmd.name}: ${err}`)
	if (state.solicitor) tidings(conf, state, state.solicitor, true)
    })
}

let exit_hook = function(conf, type) {
    let hook = 'exit' + (type ? 1 : 0)
    let cmd = conf.user[hook]
    if (!cmd.name) return

    vlog(`HOOK ${hook}: ${cmd.name} ${cmd.args.join(' ')}`)

    let child = spawn(cmd.name, cmd.args, { stdio: [0, 1, 2] })
    child.on('exit', (code) => {
	vlog(`HOOK ${hook}: exit code: ${code}`)
    })
    child.on('error', (err) => {
	log(`HOOK ${hook}: ${err}`)
    })
}

let watch = function(conf) {
    let state = {
	locked: false,
	solicitor: null,
	last: null
    }

    let debounce_tidings = _.debounce(function(o, s, c) {
	tidings(o, s, c)
    }, conf.user.debounce)

    let neid = new NEId()
    let watcher = chokidar.watch(conf.user.a, {ignored: conf.user.e})

    watcher.on('all', (event, file) => {
	let cur = new NotifyEvent(neid, event, file)
	debounce_tidings(conf, state, cur)
	state.last = cur
    })

    watcher.on('error', err => {
	log(err.toString())
	if (err.code === 'ENOSPC' && os.platform() === 'linux') {
	    log(`ENOSPC usually means you've reached the max number of the
inotify watches. See /proc/sys/fs/inotify/max_user_watches for the current
value. We've defaulted on ${state.last.id+1}.`)
	}
	process.exit(1)
    })

    server(conf, state, watcher)
}

let server = function(conf, state, watcher) {
    let http = require('http')
    let srv = http.createServer( (req, res) => {
	let obj = watcher.getWatched()
	switch (req.url) {
	case '/state':
	    obj = state
	    break
	case '/conf':
	    obj = conf
	    break
	}
	res.end(JSON.stringify(obj))
    })

    if (conf.user.S !== '') srv.listen(conf.user.S)
}

let cmd_run_params = function(arr) {
    return { name: arr[0], args: arr.slice(1) }
}


// Main

let conf = {
    user: {
	a: '.',
	e: [],
	v: false,
	debounce: 1000,
	S: '',
	norerun: false,
	exit0: '',
	exit1: ''
    },
    cmd: {
	name: 'fortune',
	args: ['-n', '80', '-s']
    },
    exclude_def: ['.*~', '*~', '.#*', '.*.swp', '.lock-*',
		  'node_modules', 'npm-debug.log', '.git', '.hg', '.ph']
	.map( (val) => '**/' + val.replace(/\./g, "\\.")),
}

let argv = minimist(process.argv.slice(2), {
    default: conf.user,
    boolean: ['v', 'norerun'],
    string: ['a', 'exit0', 'exit1']
})

conf.user = argv
conf.user.a = [].concat(argv.a)
conf.user.e = _.uniq(conf.exclude_def.concat(argv.e))
conf.user.exit0 = cmd_run_params(shellwords.split(conf.user.exit0))
conf.user.exit1 = cmd_run_params(shellwords.split(conf.user.exit1))
if (conf.user.v) vlog = log

if (argv._[0]) conf.cmd = cmd_run_params(argv._)

try {
    // actually, it should be chokidar's job
    conf.user.a.forEach( dir => fs.statSync(dir) )
} catch (err) {
    log(err.toString())
    process.exit(1)
}
watch(conf)
